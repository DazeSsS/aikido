from datetime import date, time, datetime
from asgiref.sync import sync_to_async
from django.conf import settings

from aiogram import F, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove

from bot.app.states import NewPractice

import bot.app.keyboards as kb

from bot.models import TelegramUser
from api.models import Practice


practices_router = Router()


def get_groups(chat_id):
    user = TelegramUser.objects.select_related('account').get(chat_id=chat_id).account
    groups_list = list(user.practice_groups.all().values('id', 'title'))

    if len(groups_list) == 0:
        return None

    groups = {}
    for group in groups_list:
        groups[group.get('title')] = group.get('id')

    return groups


@practices_router.callback_query(F.data == 'practices')
async def checks(callback: CallbackQuery, state: FSMContext):
    await callback.answer('')

    groups = await sync_to_async(get_groups)(callback.message.chat.id)
    await state.update_data(groups=groups)

    if groups is None:
        await callback.message.answer('–£ –≤–∞—Å –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø—ã')
        return

    await state.set_state(NewPractice.group)
    await callback.message.answer('<b>–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:</b>', reply_markup=await kb.create_reply_keyboard(groups.keys()))


@practices_router.message(NewPractice.group)
async def save_group(message: Message, state: FSMContext):
    groups = (await state.get_data()).get('groups')
    group_name = message.text
    group_id = groups.get(group_name)

    if group_id is None:
        await message.answer(
            '<b>–¢–∞–∫–æ–π –≥—Ä—É–ø–ø—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.</b>\n'
            '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:',
            reply_markup=await kb.create_reply_keyboard(groups.keys())
        )
        return
    
    await state.update_data(group_id=group_id)
    await state.set_state(NewPractice.date)
    await message.answer(
        '<b>–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏</b>\n'
        '<i>–ì–ì–ì–ì-–ú–ú-–î–î</i>',
        reply_markup=ReplyKeyboardRemove()
    )


@practices_router.message(NewPractice.date)
async def save_date(message: Message, state: FSMContext):
    try:
        date.fromisoformat(message.text)
        await state.update_data(date=message.text)
    except ValueError:
        await message.answer('<b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã ü§ï</b>')
        await message.answer(
            '<b>–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏</b>\n'
            '<i>–ì–ì–ì–ì-–ú–ú-–î–î</i>'
        )
        return

    await state.set_state(NewPractice.time)
    await message.answer(
        '<b>–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:</b>\n'
        '<i>–ú–ú:–°–°</i>'
    )


@practices_router.message(NewPractice.time)
async def save_time(message: Message, state: FSMContext):
    try:
        time.fromisoformat(message.text)
        await state.update_data(time=message.text)
    except ValueError:
        await message.answer('<b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ ü§ï</b>')
        await message.answer(
            '<b>–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:</b>\n'
            '<i>–ú–ú:–°–°</i>'
        )
        return

    await state.set_state(NewPractice.duration)
    await message.answer('<b>–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö</b>')

import logging

@practices_router.message(NewPractice.duration)
async def save_time(message: Message, state: FSMContext):
    is_number = message.text.isdecimal()
    if not is_number:
        await message.answer('<b>–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö</b>')
        return

    data = await state.get_data()

    price = settings.PRACTICE_BASE_PRICE
    group_id = data.get('group_id')
    date = f'{data.get("date")}T{data.get("time")}'
    duration = int(message.text)

    try:
        await sync_to_async(Practice.objects.create)(
            price=price,
            group_id=group_id,
            date=datetime.fromisoformat(date),
            duration=duration
        )
    except Exception:
        await message.answer('<b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ ü§ï</b>')

    await state.clear()
    await message.answer('<b>–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ ‚úÖ</b>')
    await message.answer('–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?', reply_markup=kb.main)

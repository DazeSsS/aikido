from datetime import date, time, datetime
from asgiref.sync import sync_to_async
from django.conf import settings
from django.core.mail import send_mail
from django.core.exceptions import ValidationError
from django.core.validators import validate_email

from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove

from bot.app.states import NewStudent

import bot.app.keyboards as kb

from api.models import User, Parent


students_router = Router()


@students_router.callback_query(F.data == 'new_student')
async def students(callback: CallbackQuery, state: FSMContext):
    await callback.answer('')

    await state.set_state(NewStudent.first_name)
    await callback.message.answer('<b>–ò–º—è:</b>')


@students_router.message(NewStudent.first_name)
async def save_first_name(message: Message, state: FSMContext):
    await state.update_data(first_name=message.text)

    await state.set_state(NewStudent.last_name)
    await message.answer('<b>–§–∞–º–∏–ª–∏—è:</b>')


@students_router.message(NewStudent.last_name)
async def save_last_name(message: Message, state: FSMContext):
    await state.update_data(last_name=message.text)

    await state.set_state(NewStudent.middle_name)
    await message.answer('<b>–û—Ç—á–µ—Å—Ç–≤–æ:</b>')


@students_router.message(NewStudent.middle_name)
async def save_middle_name(message: Message, state: FSMContext):
    await state.update_data(middle_name=message.text)

    await state.set_state(NewStudent.email)
    await message.answer('<b>Email:</b>')


@students_router.message(NewStudent.email)
async def save_email(message: Message, state: FSMContext):
    try:
        validate_email(message.text)
        await state.update_data(email=message.text)
    except ValidationError:
        await message.answer('<b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ—á—Ç—ã ü§ï</b>')
        await message.answer('<b>Email:</b>')
        return

    await state.set_state(NewStudent.date_of_birth)
    await message.answer(
        '<b>–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è</b>\n'
        '<i>–ì–ì–ì–ì-–ú–ú-–î–î</i>'
    )


@students_router.message(NewStudent.date_of_birth)
async def save_date_of_birth(message: Message, state: FSMContext):
    try:
        date.fromisoformat(message.text)
        await state.update_data(date_of_birth=message.text)
    except ValueError:
        await message.answer('<b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã ü§ï</b>')
        await message.answer(
            '<b>–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è</b>\n'
            '<i>–ì–ì–ì–ì-–ú–ú-–î–î</i>'
        )
        return

    await state.set_state(NewStudent.gender)
    await message.answer('<b>–ü–æ–ª</b>', reply_markup=kb.gender)


@students_router.message(NewStudent.gender)
async def save_gender(message: Message, state: FSMContext):
    gender = 'male' if message.text.lower() == '–º—É–∂—Å–∫–æ–π' else 'female'
    await state.update_data(gender=gender)

    await state.set_state(NewStudent.parent_first_name)
    await message.answer('<b>–ò–º—è —Ä–æ–¥–∏—Ç–µ–ª—è:</b>', reply_markup=ReplyKeyboardRemove())


@students_router.message(NewStudent.parent_first_name)
async def save_parent_first_name(message: Message, state: FSMContext):
    await state.update_data(parent_first_name=message.text)

    await state.set_state(NewStudent.parent_last_name)
    await message.answer('<b>–§–∞–º–∏–ª–∏—è —Ä–æ–¥–∏—Ç–µ–ª—è:</b>')


@students_router.message(NewStudent.parent_last_name)
async def save_parent_last_name(message: Message, state: FSMContext):
    await state.update_data(parent_last_name=message.text)

    await state.set_state(NewStudent.parent_middle_name)
    await message.answer('<b>–û—Ç—á–µ—Å—Ç–≤–æ —Ä–æ–¥–∏—Ç–µ–ª—è:</b>')


@students_router.message(NewStudent.parent_middle_name)
async def save_parent_middle_name(message: Message, state: FSMContext):
    await state.update_data(parent_middle_name=message.text)

    await state.set_state(NewStudent.parent_contact)
    await message.answer('<b>–ö–æ–Ω—Ç–∞–∫—Ç —Ä–æ–¥–∏—Ç–µ–ª—è:</b>')


@students_router.message(NewStudent.parent_contact)
async def save_parent_contact(message: Message, state: FSMContext):
    data = await state.get_data()

    role = User.STUDENT
    first_name = data.get('first_name')
    last_name = data.get('last_name')
    middle_name = data.get('middle_name')
    email = data.get('email')
    date_of_birth = data.get('date_of_birth')
    gender = data.get('gender')
    random_password = User.objects.make_random_password(8)
    
    user = await sync_to_async(User.objects.create_user)(
        role=role,
        first_name=first_name,
        last_name=last_name,
        middle_name=middle_name,
        email=email,
        password=random_password,
        date_of_birth=date_of_birth,
        gender=gender
    )

    parent_first_name = data.get('parent_first_name')
    parent_last_name = data.get('parent_last_name')
    parent_middle_name = data.get('parent_middle_name')
    parent_contact = message.text

    parent = await sync_to_async(Parent.objects.create)(
        first_name=parent_first_name,
        last_name=parent_last_name,
        middle_name=parent_middle_name,
        contact=parent_contact
    )
    await sync_to_async(parent.childs.add)(user)

    send_mail(
        subject="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ AikiDojo",
        message=(
            '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–∞ AikiDojo!\n\n'
            '–î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞:\n'
            f'–ª–æ–≥–∏–Ω: {email}\n'
            f'–ø–∞—Ä–æ–ª—å: {random_password}\n\n'
            '–ï—Å–ª–∏ –≤—ã —Å–ª—É—á–∞–π–Ω–æ –ø–æ–ª—É—á–∏–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ - –Ω–µ –ø—É–≥–∞–π—Ç–µ—Å—å, –º—ã –ø—Ä–æ—Å—Ç–æ –≥—Ä—É–ø–ø–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, '
            '–∫–æ—Ç–æ—Ä–∞—è —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–µ–±-—Å–µ—Ä–≤–∏—Å, –∏ –º—ã –º–æ–≥–ª–∏ —Å–ª—É—á–∞–π–Ω–æ —É–∫–∞–∑–∞—Ç—å –≤–∞—à email –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏üôÇ'
        ),
        html_message=(
            '<b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–∞ AikiDojo!</b><br><br>'
            '–î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞:<br>'
            f'<i>–ª–æ–≥–∏–Ω:</i> {email}<br>'
            f'<i>–ø–∞—Ä–æ–ª—å:</i> {random_password}<br><br>'
            '–ï—Å–ª–∏ –≤—ã —Å–ª—É—á–∞–π–Ω–æ –ø–æ–ª—É—á–∏–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ - –Ω–µ –ø—É–≥–∞–π—Ç–µ—Å—å, –º—ã –ø—Ä–æ—Å—Ç–æ –≥—Ä—É–ø–ø–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, '
            '–∫–æ—Ç–æ—Ä–∞—è —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–µ–±-—Å–µ—Ä–≤–∏—Å, –∏ –º—ã –º–æ–≥–ª–∏ —Å–ª—É—á–∞–π–Ω–æ —É–∫–∞–∑–∞—Ç—å –≤–∞—à email –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏üôÇ'
        ),
        from_email=settings.EMAIL_HOST_USER,
        recipient_list=[email, settings.EMAIL_HOST_USER]
    )

    await state.clear()
    await message.answer('–£—á–µ–Ω–∏–∫ —Å–æ–∑–¥–∞–Ω ‚úÖ')
    await message.answer('–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?', reply_markup=kb.main)